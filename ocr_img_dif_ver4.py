#### Bu dosyayƒ± git ile takibe aldƒ±m.
#### https://github.com/baba-enkai/ocr_baba_enkai_ver4
#### 26.05.2025
import cv2
import pytesseract
import imagehash
import numpy as np
from PIL import ImageGrab
import xlwings as xw
import win32gui
import win32con
import win32process
import sys
import time
import re
import os
import pyautogui
import tkinter as tk
import threading
import pygetwindow as gw
from datetime import datetime
from PIL import Image, ImageTk
import concurrent.futures
from concurrent.futures import ThreadPoolExecutor

# ==== CONFIG ====
bbox_1 = (46, 266, 260, 980)
bbox_2 = (46, 241, 260, 997) 
bbox = bbox_1 
APP_WINDOW_TITLE = "Borsa ƒ∞≈ülem Platformu"  # Replace this with your actual app window title
DEBUG_MODE = True  # Set to False to disable rectangle drawing
DEBUG_STAGES = False
DEBUG_RESULTS = False
EXCEL_PATH = "SenetSepet-TAM11.xlsm"  # Your Excel file
SHEET_NAME = "OCR_list"
SCROLL_PIXELS = -120
OCR_CONFIG = "--psm 7 -c preserve_interword_spaces=1"
highlight_duration = 10 # seconds

# Coordinates and constants
row_height = 42
NUM_ROWS = 17
symbol_x_end = 105
price_x_start = 106
capture_height = 740
start_y = 10
end_y = row_height * 17
scale_factor = 0.9
screen_x = 48       # Adjust this for your app window
screen_y = 260
screen_width = 212  # Adjust this based on the width needed for prices
same_image_flag = False
captured_images = []

#### YENI MANTIK ####
def merge_vertical(images):
    """
    Verilen PIL imajlarƒ±nƒ±n hepsini dikey olarak tek bir imajda birle≈ütirir.
    """
    total_height = sum(img.height for img in images)
    max_width = max(img.width for img in images)
    
    merged_image = Image.new('RGB', (max_width, total_height), color=(255, 255, 255))
    
    y_offset = 0
    for img in images:
        merged_image.paste(img, (0, y_offset))
        y_offset += img.height
    
    return merged_image

# √ñrnek kullanƒ±m:
# captured_images = [img1, img2, img3] gibi bir listen olduƒüunu varsayalƒ±m
# merged_img = merge_vertical(captured_images)
# merged_img.show()  # G√∂zlemleme i√ßin

# Eƒüer kaydetmek istersen:
# merged_img.save("merged_output.png")

def show_time_window(title, time_str, x=100, y=100):
    def _show():
        root = tk.Tk()
        root.overrideredirect(True)
        root.geometry(f"180x50+{x}+{y}")
        root.attributes("-topmost", True)
        label = tk.Label(root, text=f"{title}:\n{time_str}", font=("Arial", 10), bg="black", fg="lime")
        label.pack(expand=True, fill='both')
        root.after(10000, root.destroy)  # Auto close after 4 seconds
        root.mainloop()
    threading.Thread(target=_show).start()

def mark_start(label="Start Time", x=540, y=100):
    start_time = datetime.now().strftime("%H:%M:%S.%f")[:-3]
    show_time_window(label, start_time, x=x, y=y)
    return datetime.now()

def mark_end(label="End Time", x=760, y=100):
    end_time = datetime.now().strftime("%H:%M:%S.%f")[:-3]
    show_time_window(label, end_time, x=x, y=y)
    return datetime.now()

# Debug i√ßin OCR alanƒ±nƒ± g√∂rselle≈ütirmek i√ßin gerekli fonksiyon.
def show_highlight_box(bbox, page_number, duration=None, margin=2, border_thickness=6, color="black"):
    x1, y1, x2, y2 = bbox
    width = x2 - x1 + margin * 2
    height = y2 - y1 + margin * 2
    x1 -= margin
    y1 -= margin

    def _box():
        root = tk.Tk()
        root.overrideredirect(True)
        # Increase height to accommodate text above the box
        root.geometry(f"{width}x{height + 30}+{x1}+{y1 - 30}")  # Move window up by 30 pixels
        root.attributes("-topmost", True)
        root.attributes("-transparentcolor", "white")  # Make white fully transparent

        canvas = tk.Canvas(root, width=width, height=height + 30, highlightthickness=0, bg="white")
        canvas.pack()

        # Draw black rectangle border (moved down by 30 pixels)
        canvas.create_rectangle(
            border_thickness // 2,
            border_thickness // 2,
            width - border_thickness // 2,
            height - border_thickness // 2,
            outline=color,
            width=border_thickness
        )

        # If duration is specified, destroy after that time
        if duration:
            root.after(int(duration * 1000), root.destroy)
        
        root.mainloop()  # Add this line to keep the window alive
        return root

    # Create and start the thread
    thread = threading.Thread(target=_box)
    thread.daemon = True  # Make thread daemon so it exits when main program exits
    thread.start()
    return thread  # Return the thread for tracking

def activate_scroll_area():
    # Moves and clicks inside the list area to ensure it is scrollable.
    pyautogui.moveTo((bbox[2] + 10, bbox[1] + 20))  # 10px to the right, 20px below top
    # Slight offset inside the bbox
    #pyautogui.click()
    time.sleep(0.1)

def scroll_down():
    activate_scroll_area()
    pyautogui.scroll(SCROLL_PIXELS)

def scroll_to_top_fast():
    activate_scroll_area()
    for _ in range(6):
        pyautogui.scroll(-SCROLL_PIXELS * 4)
        time.sleep(0.01)

def bring_investing_app_to_front():
    windows = [w for w in gw.getWindowsWithTitle(APP_WINDOW_TITLE) if w.visible]
    if not windows:
        print("‚ùå Could not find the Investing app window.")
        return False

    win = windows[0]
    win.activate()
    activate_scroll_area()
    time.sleep(0.1)

    # Minimize kontrol√º (sol √ºst koordinatlar -32000 civarƒ±ndaysa minimize olmu≈ü demektir)
    if win.left <= -32000 or win.top <= -32000:
        print("üîÑ Uygulama minimize edilmi≈ü, geri getiriliyor...")
        win.restore()
        time.sleep(0.1)

    # Ekran √ß√∂z√ºn√ºrl√ºƒü√ºn√º al
    screen_w, screen_h = pyautogui.size()

    # Tam ekran kontrol√º
    is_fullscreen = (win.left == 0 and win.top == 0 and
                     win.width == screen_w and win.height == screen_h)

    if not is_fullscreen:
        win.activate()
        time.sleep(0.1)
        pyautogui.press('f11')
        time.sleep(0.1)

    return True

# ==== IMAGE PROCESSING ====
def preprocess(img, is_price_area=False, debug_view = True):
    # Bo≈ü deƒüi≈üken tanƒ±mlarƒ±
    gray = clahe =binary = negative = dilated = img.copy()

    if is_price_area:
        try:
            # Fiyat alanƒ± i√ßin √∂zel √∂n i≈üleme
            # 1. Gri tonlama
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            
            # 2. Kontrast artƒ±rma
            clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8,8))
            equalized = clahe.apply(gray) if clahe and gray is not None else gray
            
            # 3. Binary thresholding - griyi tamamen yok et
            _, binary = cv2.threshold(gray, 127, 255, cv2.THRESH_BINARY)
            
            # 4. Negatif g√∂r√ºnt√º olu≈ütur
            negative = cv2.bitwise_not(binary)
            
            # 5. Morfolojik i≈ülemler
            kernel = np.ones((1, 1), np.uint8)
            dilated = cv2.dilate(negative, kernel, iterations=1)                        
        except Exception as e:
            print(f"G√∂r√ºnt√º i≈üleme hatasƒ±: {e}")
            return img  # Hata durumunda orijinal g√∂r√ºnt√ºy√º d√∂nd√ºr
        
        finally:
             if DEBUG_STAGES and debug_view:
                  show_debug_stages({
                    "Original": img,
                    "Gray": gray,
                    "Clahe Equalized": equalized,
                    "Binary": binary,
                    "Negative": negative,
                    "Dilated": dilated
                   })
        return equalized
            
    else:
        # Sembol alanƒ± i√ßin normal √∂n i≈üleme
        clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8,8))
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        equalized = clahe.apply(gray)
        thresh = cv2.adaptiveThreshold(
            equalized, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
            cv2.THRESH_BINARY, 15, 5
        )
        kernel = np.ones((1, 1), np.uint8)
        dilated = cv2.dilate(thresh, kernel, iterations=1)

        if DEBUG_STAGES and debug_view :
            show_debug_stages({
                "Original": img,
                "Gray": gray,
                "Clahe Equalized": equalized,
                "Threshold": thresh,
                "Dilated": dilated
                })

        return equalized
    
def extract_text(img, is_price_area=False):

    if img is None or img.size == 0:
        print("‚ö†Ô∏è Uyarƒ±: OCR'a g√∂nderilen g√∂rsel None veya bo≈ü.")
        return ""

    if not isinstance(img, (np.ndarray, Image.Image)):
        print(f"[ERROR] Unsupported image object type: {type(img)}")
        return ""
    
    # Eƒüer cv2 g√∂r√ºnt√ºs√º ise:
    if isinstance(img, np.ndarray):
        ocr_input_pil = Image.fromarray(img)
    else:
        ocr_input_pil = img  # Zaten PIL.Image.Image ise

    if is_price_area:
        # Fiyat alanƒ± i√ßin √∂zel OCR parametreleri
        config = "--psm 7 --oem 3 -c tessedit_char_whitelist=0123456789,."  # Sadece sayƒ±lar ve noktalama
    else:
        config = "--psm 7"  # Normal OCR parametreleri
    try:
        return pytesseract.image_to_string(ocr_input_pil, config=config).strip()
    except Exception as e:
        print(f"‚ùå OCR hatasƒ±: {e}")
        return ""

# ==== SCREEN CAPTURE ====
def capture_screen(custom_bbox=None):
    """
    Ekran g√∂r√ºnt√ºs√º alƒ±r.
    Args:
        custom_bbox: √ñzel bbox deƒüerleri. None ise varsayƒ±lan deƒüerler kullanƒ±lƒ±r.
    Returns:
        numpy.ndarray: Ekran g√∂r√ºnt√ºs√º
    """
    if custom_bbox is None:
        bbox = (screen_x, screen_y, screen_x + screen_width, screen_y + capture_height)
    else:
        bbox = custom_bbox
    
    try:
        screen = ImageGrab.grab(bbox=bbox)
        img_array = np.array(screen)
        if img_array.size == 0:
            raise ValueError("Captured image is empty")
        return img_array
    except Exception as e:
        print(f"Error capturing screen: {e}")
        return None

def draw_debug_rectangles_with_text(img, texts, row_count=17):
    img_with_rects = img.copy()
    text_height = 25
    font = cv2.FONT_HERSHEY_SIMPLEX
    font_scale = 0.5
    thickness = 1

    # Draw rectangles on the main image
    for i in range(row_count):
        y1 = start_y + i * row_height
        y2 = y1 + row_height
        cv2.rectangle(img_with_rects, (0, y1), (symbol_x_end, y2), (0, 0, 0), 1)
        cv2.rectangle(img_with_rects, (price_x_start, y1), (screen_width, y2), (0, 0, 0), 1)

    # Create a white background for text display
    text_img = 255 * np.ones((img.shape[0], 220, 3), dtype=np.uint8)

    for i, (symbol, price) in enumerate(texts):
        y = start_y + i * row_height + 20
        text_line = f"{i+1:02d}: {symbol} - {price}"
        cv2.putText(text_img, text_line, (10, y), font, font_scale, (0, 0, 0), thickness)

    # Combine both images side by side
    combined = np.hstack((img_with_rects, text_img))

    cv2.imshow("Debug View: Image + OCR Text", combined)
    cv2.setWindowProperty("Debug View: Image + OCR Text", cv2.WND_PROP_TOPMOST, 1)
    cv2.moveWindow("Debug View: Image + OCR Text", 1300, 100)
    key = cv2.waitKey(1000)  # 1 seconds or key
    cv2.destroyAllWindows()

def show_debug_stages(img_dict, title="OCR Stages Debug View", wait_ms=3000):
    """
    OCR i≈üleme a≈üamalarƒ±nƒ± tek bir yatay g√∂rselde g√∂sterir.

    Parameters:
        img_dict (dict): {"A≈üama adƒ±": g√∂r√ºnt√º} ≈üeklinde OCR a≈üamalarƒ±nƒ± i√ßerir.
        title (str): G√∂r√ºnt√º penceresinin ba≈ülƒ±ƒüƒ±.
        wait_ms (int): ms cinsinden bekleme s√ºresi. 0 sonsuz.
    """
    
    processed_imgs = []

    for name, img in img_dict.items():
        # Gri ya da tek kanal g√∂rselleri BGR'ye √ßevir
        if len(img.shape) == 2:
            img = cv2.cvtColor(img, cv2.COLOR_GRAY2BGR)
        
        # A≈üama adƒ±nƒ± √ºstte g√∂steren √ßubuk ekle
        label_bar = np.full((25, img.shape[1], 3), 255, dtype=np.uint8)
        cv2.putText(label_bar, name, (10, 18), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0,0,0), 1)

        stacked = np.vstack([label_bar, img])
        processed_imgs.append(stacked)

    # G√∂rselleri yatayda birle≈ütir
    combined = cv2.hconcat(processed_imgs)

    # G√∂ster
    cv2.imshow(title, combined)
    cv2.setWindowProperty(title, cv2.WND_PROP_TOPMOST, 1)
    cv2.moveWindow(title, 100, 100)
    #cv2.waitKey(wait_ms)
    #cv2.destroyAllWindows()

def connect_to_open_workbook(target_wb_name):
    # Excel uygulamalarƒ± i√ßinde dola≈ü
    for candidate_app in xw.apps:
        for wb in candidate_app.books:
            if target_wb_name.lower() in wb.name.lower():
                return wb  # Workbook bulundu
    # Eƒüer buraya kadar geldiyse, workbook a√ßƒ±k deƒüil
    raise Exception(f"‚ùå Workbook '{target_wb_name}' is not open in any Excel instance.")

# ==== MAIN PROCESS ====

def process_single_row(i, full_img):
    y1 = start_y + i * row_height
    y2 = y1 + row_height
    row_img = full_img[y1:y2, :]

    # OCR i≈ülemleri - fiyat alanƒ± i√ßin √∂zel i≈üleme
    symbol_img = preprocess(row_img[:, :symbol_x_end], is_price_area=False, debug_view = False)
    price_img  = preprocess(row_img[:, price_x_start:], is_price_area=True, debug_view = False)
    
    # SADECE SON SAYFADA G√ñSTER
    if False and same_image_flag:
        # Gri g√∂r√ºnt√ºleri BGR formatƒ±na √ßevir
        symbol_img_tmp = symbol_img
        price_img_tmp = price_img

        if len(symbol_img.shape) == 2:
            symbol_img_tmp = cv2.cvtColor(symbol_img, cv2.COLOR_GRAY2BGR)

        if len(price_img.shape) == 2:
            price_img_tmp = cv2.cvtColor(price_img, cv2.COLOR_GRAY2BGR)

        # Y√ºkseklik uyumsuzsa hizala
        h = row_img.shape[0]
        symbol_img_tmp = cv2.resize(symbol_img_tmp, (symbol_img_tmp.shape[1], h))
        price_img_tmp = cv2.resize(price_img_tmp, (price_img_tmp.shape[1], h))

        # combine i≈ülemi
        try:
            # combined_img_tmp = np.hstack((row_img, symbol_img_tmp, price_img_tmp))

            cv2.imshow("row_img", row_img)
            cv2.waitKey(1)  # pencerenin olu≈üturulmasƒ±nƒ± bekle
            cv2.setWindowProperty("row_img", cv2.WND_PROP_TOPMOST, 1)
            cv2.moveWindow("row_img", 100, 100)
            print("row_img g√∂r√ºnt√ºleniyor... Devam etmek i√ßin bir tu≈üa bas.")

            cv2.imshow("symbol_img_tmp", symbol_img_tmp)
            cv2.waitKey(1)  # pencerenin olu≈üturulmasƒ±nƒ± bekle
            cv2.setWindowProperty("symbol_img_tmp", cv2.WND_PROP_TOPMOST, 1)
            cv2.moveWindow("symbol_img_tmp", 350, 100)
            print("symbol_img_tmp g√∂r√ºnt√ºleniyor... Devam etmek i√ßin bir tu≈üa bas.")

            cv2.imshow("price_img_tmp", price_img_tmp)
            cv2.waitKey(1)  # pencerenin olu≈üturulmasƒ±nƒ± bekle
            cv2.setWindowProperty("price_img_tmp", cv2.WND_PROP_TOPMOST, 1)
            cv2.moveWindow("price_img_tmp", 600, 100)
            print("price_img_tmp g√∂r√ºnt√ºleniyor... Devam etmek i√ßin bir tu≈üa bas.")

            cv2.waitKey(0)
            cv2.destroyAllWindows()
        except Exception as e:
            print(f"‚ùå G√∂r√ºnt√º birle≈ütirme/g√∂sterme hatasƒ±: {e}")

    symbol_text = extract_text(symbol_img)
    price_text  = extract_text(price_img, is_price_area=True)

    # Sembolleri Temizliyoruz
    cleaned_symbol = re.sub(r'[^A-Z0-9]', '', symbol_text.upper()).rstrip(':.‚Ä¢¬∑*-')

    # Fiyatlarƒ± Temizliyoruz
    try:
        temp_price = price_text.replace('.', '')  # binlik ayra√ß noktalarƒ± kaldƒ±r
        last_price = temp_price.replace(',', '.')
        cleaned_price = float(last_price)
        cleaned_price = f"{cleaned_price:.2f}"  # Keep 2 decimal places
    except ValueError:
        cleaned_price = ""  # Or set to "N/A"

    return (i, cleaned_symbol, cleaned_price)

def compare_symbol_lists(list1, list2):
    """
    ƒ∞ki sembol listesini kar≈üƒ±la≈ütƒ±rƒ±r. Fiyatlarƒ± dikkate almaz.
    Sadece sembollerin aynƒ± olup olmadƒ±ƒüƒ±nƒ± kontrol eder.
    """
    # Sadece sembolleri al (fiyatlarƒ± √ßƒ±kar)
    symbols1 = {item[1] for item in list1}  # item[1] sembol, item[2] fiyat
    symbols2 = {item[1] for item in list2}
    
    return symbols1 == symbols2

def remove_duplicates(results):
    """
    Removes duplicates by symbol, keeping the last occurrence in the list.
    Also logs filtered-out (duplicate) items.
    Input: List of (i, symbol, price)
    Output: Cleaned list sorted by original order of last appearance.
    """
    if DEBUG_MODE:
        print("\n--- [DEBUG] Gƒ∞Rƒ∞≈û Lƒ∞STESƒ∞ ---")
        for i, symbol, price in results:
            print(f"{i}: {symbol} - {price}")

    symbol_to_index = {}
    for idx, (i, symbol, price) in enumerate(results):
        symbol_key = symbol.strip().upper()
        symbol_to_index[symbol_key] = idx  # sadece en son g√∂r√ºlenin indeksini tut

    # Benzersiz olanlarƒ±n indeksleri
    unique_indices = sorted(symbol_to_index.values())

    # Temizlenmi≈ü (benzersiz) sonu√ßlar
    unique_results = [results[idx] for idx in unique_indices]

    if DEBUG_MODE:
        print("\n--- [DEBUG] DUPLICATE TEMƒ∞ZLENMƒ∞≈û √áIKI≈û Lƒ∞STESƒ∞ ---")
        for i, symbol, price in unique_results:
            print(f"{i}: {symbol} - {price}")

    # Elenen (tekrar olan) elemanlarƒ± bul
    removed = []
    seen = set()
    for idx, (i, symbol, price) in enumerate(results):
        symbol_key = symbol.strip().upper()
        if symbol_key in seen and idx not in unique_indices:
            removed.append((i, symbol, price))
        else:
            seen.add(symbol_key)

    if DEBUG_MODE:
        if removed:
            print("\n--- [DEBUG] ELENEN (DUPLICATE) SATIRLAR ---")
            for i, symbol, price in removed:
                print(f"{i}: {symbol} - {price}")
        else:
            print("\n--- [DEBUG] ELENEN KAYIT YOK ---")

    return unique_results

def adjust_initial_bbox_for_debug_mode(bbox, debug_mode, border_thickness=6, margin=2):
    if not debug_mode:
        #top_margin = 30 + (border_thickness // 2) + margin
        #bottom_margin = (border_thickness // 2) + margin
        #left_margin = right_margin = (border_thickness // 2) + margin
        top_margin = bottom_margin = 5
        left_margin = right_margin = 2
        x1, y1, x2, y2 = bbox
        if DEBUG_MODE:
            print('x1, y1, x2, y2 ==== ', x1, y1, x2, y2)
            print('left_margin, right_margin, top_margin, bottom_margin ==== ', left_margin, right_margin, top_margin, bottom_margin)
        return (
            x1 + left_margin,
            y1 + top_margin,
            x2 - right_margin,
            y2 - bottom_margin
        )
    else:
        return bbox

def process_rows():
    global bbox
    global same_image_flag
    hash_full_img = None
    hash_previous_img = None
    diff = 0
    target_wb_name = os.path.basename(EXCEL_PATH)
    try:
        wb = connect_to_open_workbook(target_wb_name)
    except Exception as e:
        print(str(e))
        sys.exit(1)

    sheet_names = [s.name.lower() for s in wb.sheets]

    if SHEET_NAME.lower() in sheet_names:
        ws = next(s for s in wb.sheets if s.name.lower() == SHEET_NAME.lower())
    else:
        ws = wb.sheets.add(name=SHEET_NAME)

    if False:
        ws.clear_contents()  # veya ws.clear() eƒüer stiller vs. de silinsin isteniyorsa
        ws.range("A1").value = [["Hisse", "Son Fiyat"]]  # Add header

    if not bring_investing_app_to_front():
        print("‚ö†Ô∏è Please open the investing app in Firefox private window and re-run the script.")
        sys.exit(1)

    activate_scroll_area()
    scroll_to_top_fast()

    # Scroll ve kar≈üƒ±la≈ütƒ±rma d√∂ng√ºs√º i√ßin deƒüi≈ükenler
    global_idx = 0
    previous_results = []
    symbol_column_img = None
    previous_symbol_column_img = None
    page_number = 1
    all_results = []  # T√ºm sayfalarƒ±n sonu√ßlarƒ±nƒ± tutacak liste
    current_box_thread = None  # To keep track of the current highlight box thread
    bbox = adjust_initial_bbox_for_debug_mode(bbox, DEBUG_MODE, border_thickness=6, margin=2)
    print ('bbox ==== ', bbox)

    

    while same_image_flag == False:  #  same_image_flag True olduƒüunda d√∂ng√º sonlanacak
        if DEBUG_MODE:
            print(f"\nüìÑ Sayfa {page_number} i≈üleniyor...")

            # === KARA KUTU ===
            initial_bbox = (screen_x, screen_y, screen_x + screen_width, screen_y + capture_height)
            current_box_thread = show_highlight_box(initial_bbox, page_number, duration=highlight_duration, color="black")
            time.sleep(highlight_duration)  # ƒ∞lk kutunun g√∂r√ºnmesini bekle

        # ƒ∞lk senet isminin pozisyonunu bulurken ge√ßici capture yapƒ±lƒ±yor.
        # 111 first_symbol_y = find_first_symbol_position()
        # 112 if DEBUG_MODE:
        # 113    print(f"\nüîç Hizalama Detaylarƒ±:")
        # 114    print(f"  ‚Ä¢ screen_y (ba≈ülangƒ±√ß): {screen_y}")
        # 115    print(f"  ‚Ä¢ first_symbol_y (bulunan): {first_symbol_y}")
            
        # 116 adjusted_screen_y = first_symbol_y - 5  # K√º√ß√ºk bir margin ekle
        
        # 117 if DEBUG_MODE:
        # 118    print(f"  ‚Ä¢ adjusted_screen_y (hesaplanan): {adjusted_screen_y}")
        # 119    print(f"  ‚Ä¢ Offset detaylarƒ±:")
        # 120    print(f"    - first_symbol_y: {first_symbol_y}")
        # 121    print(f"    - -5 (margin): -5")
        
        # 122 adjusted_bbox = (screen_x, adjusted_screen_y, screen_x + screen_width, adjusted_screen_y + capture_height)
        # 123 print(f"  ‚Ä¢ Capture b√∂lgesi (x1, y1, x2, y2): {adjusted_bbox}")

        if DEBUG_MODE:
            # KARA KUTU'yu sil
            if current_box_thread and current_box_thread.is_alive():
                try:
                    if tk._default_root:
                        tk._default_root.quit()
                        tk._default_root.destroy()
                        tk._default_root = None
                except Exception as e:
                    print(f"Pencere temizleme hatasƒ± (√∂nemli deƒüil): {e}")
        
        # 134 === YE≈ûƒ∞L KUTU ===
        # 135 current_box_thread = show_highlight_box(adjusted_bbox, page_number, duration=highlight_duration, color="green")
        # 136 time.sleep(highlight_duration)  # Hizalama kutunun g√∂r√ºnmesini bekle
            
        # 137 === YE≈ûƒ∞L KUTU TEMƒ∞ZLEME ===
        # 138 try:
        # 139     if current_box_thread and current_box_thread.is_alive():
        # 140         current_box_thread = None  # Thread referansƒ±nƒ± temizle
        # 141         if tk._default_root:
        # 142             tk._default_root.quit()  # √ñnce quit √ßaƒüƒ±r
        # 143             tk._default_root.destroy()  # Sonra destroy
        # 144             tk._default_root = None  # Root referansƒ±nƒ± temizle
        # 145             except Exception as e:
        # 146                 print(f"Temizleme hatasƒ± (√∂nemli deƒüil): {e}")
        # 147             time.sleep(0.2)  # Biraz daha uzun bekle
        
        # === GER√áEK CAPTURE SCREEN ba≈üarƒ±sƒ±z ise 5 kez tekrarlƒ±yoruz ===
        retry_count = 0
        max_retries = 5  # Sƒ±nƒ±rsƒ±z da yapƒ±labilir.
        while True:
            full_img = capture_screen(custom_bbox=bbox)
            if full_img is not None:
                break  # Capture ba≈üarƒ±lƒ±, d√∂ng√ºden √ßƒ±k
            print("üîÅ Ekran g√∂r√ºnt√ºs√º alƒ±namadƒ±, tekrar deneniyor...")
            retry_count += 1
            if retry_count >= max_retries:
                print("‚ùå Maksimum deneme sayƒ±sƒ±na ula≈üƒ±ldƒ±. ƒ∞≈ülem sonlandƒ±rƒ±lƒ±yor.")
                break  # veya break / raise Exception, senin akƒ±≈üƒ±na g√∂re
            time.sleep(1)

        captured_images.append(Image.fromarray(cv2.cvtColor(full_img, cv2.COLOR_BGR2RGB)))

        # Sadece sembollerin olduƒüu b√∂lgeyi kƒ±rpƒ±yoruz
        symbol_column_img = full_img[:, 0:symbol_x_end]  # x=0'den x=105'e kadar olan alan

        # G√∂r√ºnt√ºy√º dosyaya kaydet
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"debug_capture_{timestamp}.png"
        cv2.imwrite(filename, full_img)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"debug_capture_symbol_column_{timestamp}.png"
        cv2.imwrite(filename, symbol_column_img)
        print(f"üì∏ Ekran g√∂r√ºnt√ºleri kaydedildi: {filename}")

        # Hash bu b√∂lgeden alƒ±nsƒ±n
        hash_full_img = imagehash.average_hash(Image.fromarray(symbol_column_img))
        # eski ... hash_full_img = imagehash.average_hash(Image.fromarray(full_img))
        if hash_previous_img is None:
            print('ƒ∞lk sayfa...Kar≈üƒ±la≈ütƒ±rma yapƒ±lmayacak.')
        else:
            print('hash_previous_img = ', hash_previous_img)
            print('hash_full_img = ', hash_full_img)
            diff = hash_previous_img - hash_full_img
            print(f"Fark: {diff}")
            if diff == 0:  # Fark yok
                same_image_flag = True
                print("üü°Aynƒ± sayfa geldi. D√∂ng√º sonlandƒ±rƒ±lacak.")
            else:
                same_image_flag = False        
                print('Yeni sayfa geldi.Devam ediliyor...')

        # Capture sonrasƒ± kontrol
        if full_img is None:
            print("  ‚Ä¢ Capture ba≈üarƒ±sƒ±z!")
        else:
            print(f"  ‚Ä¢ Capture ba≈üarƒ±lƒ± - G√∂r√ºnt√º boyutu: {full_img.shape}")

            # SADECE SON SAYFADA G√ñSTER
            if False and same_image_flag:
                cv2.imshow("üì∏ FINAL PAGE - CAPTURED IMAGE", full_img)
                cv2.setWindowProperty("üì∏ FINAL PAGE - CAPTURED IMAGE", cv2.WND_PROP_TOPMOST, 1)
                cv2.moveWindow("üì∏ FINAL PAGE - CAPTURED IMAGE", 1300, 100)
                print("üëÅÔ∏è Son sayfa g√∂r√ºnt√ºleniyor... Devam etmek i√ßin bir tu≈üa bas.")
                cv2.waitKey(0)
                cv2.destroyAllWindows()
                _ = preprocess(full_img, debug_view=True)

        results = []
        with ThreadPoolExecutor(max_workers=6) as executor:
            futures = [executor.submit(process_single_row, i, full_img) for i in range(NUM_ROWS)]
            for future in futures:
                try:
                    i, symbol, price = future.result()
                    results.append((global_idx, symbol, price))
                    global_idx += 1
                except Exception as e:
                    print(f"Error processing row: {e}")
                    continue

        if not results:
            print("No results obtained, retrying...")
            time.sleep(1)
            continue

        # Sonu√ßlarƒ± sƒ±rala
        results.sort(key=lambda x: x[0])
        if DEBUG_RESULTS:
            print("R"*100)
            print("results: ", results)
            print("X"*100)

        # Debug modunda g√∂ster - OCR i≈ülemi bittikten sonra
        if False and DEBUG_MODE:
            texts = [(s, p) for _, s, p in results]
            draw_debug_rectangles_with_text(full_img, texts)
            cv2.waitKey(0)                                   # Tu≈ü basƒ±lana kadar bekle
            cv2.destroyAllWindows()                          # Sonra t√ºm pencereleri kapat

        # √ñnceki liste ile kar≈üƒ±la≈ütƒ±r. Bu eski mantƒ±k kaldƒ±rƒ±ldƒ±. Artƒ±k imaj kar≈üƒ±la≈ütƒ±rma yapƒ±yoruz.

        if DEBUG_MODE and same_image_flag:
            print("P"*100)
            print("Previous Results: ", previous_results)
            print("R"*100)
            print("Results: ", results)
            print("X"*100)

        # Sonu√ßlarƒ± ana listeye ekle
        all_results.extend(results)

        # Son sayfa ise tekrarlƒ±larƒ± kaldƒ±r
        if same_image_flag:
            merged_img = merge_vertical(captured_images)
            merged_img.show()
            merged_img.save("merged_output.png")
            all_results = remove_duplicates(all_results)
            # Excel' e yaz
            start_time = time.time()
            if False:
                start_row = 2
                for i, (_, symbol_text, price_text) in enumerate(all_results):
                    ws.range(f"A{start_row + i}").value = symbol_text
                    ws.range(f"B{start_row + i}").value = price_text
            end_time = time.time()
            print(f"ƒ∞≈ülem s√ºresi: {end_time - start_time} saniye")
        
        else:
            # Mevcut sonu√ßlarƒ± √∂nceki sonu√ß olarak kaydet
            previous_results = results.copy()
            previous_symbol_column_img = symbol_column_img.copy()
            hash_previous_img = imagehash.average_hash(Image.fromarray(previous_symbol_column_img))
        page_number += 1
        bbox = bbox_2
        # Scroll yap
        scroll_down()
        time.sleep(1)  # Scroll sonrasƒ± bekleme

    scroll_to_top_fast()
    print(f"\n‚úÖ ƒ∞≈ülem tamamlandƒ±! Toplam {page_number-1} sayfa tarandƒ±.")
    print(f"üìä Toplam {len(all_results)} adet senet/fiyat √ßifti bulundu.")

    # üîÅ Return focus to Excel
    excel_windows = [w for w in gw.getWindowsWithTitle("Excel") if w.visible]
    if excel_windows:
        excel_window = excel_windows[0]
        excel_window.activate()
        excel_window.maximize()
        print("‚úÖ Focus returned to Excel.")
    else:
        print("‚ùå Excel window not found.")

    # Clean up any remaining highlight boxes
    if current_box_thread and current_box_thread.is_alive():
        for window in tk._default_root.winfo_children() if tk._default_root else []:
            try:
                window.destroy()
            except:
                pass
        if tk._default_root:
            try:
                tk._default_root.destroy()
            except:
                pass

def find_first_symbol_position():
    """
    ƒ∞lk senet isminin pozisyonunu tespit eder.
    Returns:
        int: ƒ∞lk senet isminin y koordinatƒ±
    """

    print("\n" + "="*50)
    print("üîç FIND_FIRST_SYMBOL_POSITION LOG ENTRIES")
    print("="*50)
    
    # GPT bunu row_img icin soyluyor. Img mi olmalƒ±
    #if row_img is None or row_img.size == 0:
    #    print("‚õî row_img bo≈ü, bu satƒ±r atlanƒ±yor.")
    #    return None
    print('bbox ==== ', bbox)
    # Ba≈üta set edilen box deƒüerlerini kullanƒ±yoruz.
    search_bbox = (bbox[0], bbox[1], bbox[2], bbox[3])
    print(f"\nüìê ARAMA ALANI:")
    print(f"  ‚Ä¢ B√∂lge (x1, y1, x2, y2): {search_bbox}")
    print(f"  ‚Ä¢ Y√ºkseklik: {search_bbox[3] - search_bbox[1]}")

    print('search_bbox ==== ', search_bbox)

    screen = ImageGrab.grab(bbox=search_bbox)
    img = np.array(screen)
    print(f"\nüì∏ G√ñR√úNT√ú Bƒ∞LGƒ∞LERƒ∞:")
    print(f"  ‚Ä¢ Yakalanan boyut: {img.shape}")

    # G√∂r√ºnt√ºy√º dosyaya kaydet
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"debug_find_image_{timestamp}.png"
    captured_images.append(Image.fromarray(cv2.cvtColor(img, cv2.COLOR_BGR2RGB)))
    cv2.imwrite(filename, img)
    print(f"shape: {img.shape}")  # (height, width) veya (height, width, channels)
    print(f"width: {img.shape[1]}, height: {img.shape[0]}")
    print(f"üì∏ Find sƒ±rasƒ±nda alƒ±nan ekran g√∂r√ºnt√ºleri kaydedildi: {filename}")

    # G√∂r√ºnt√ºy√º i≈üle
    processed_img = preprocess(img, debug_view = False)
    print(f"  ‚Ä¢ ƒ∞≈ülenmi≈ü boyut: {processed_img.shape}")
    
    # Her satƒ±rƒ± kontrol et
    found_symbols = []
    print("\nüîé TARAMA BA≈ûLIYOR...")
    print(f"  ‚Ä¢ Ba≈ülangƒ±√ß Y: {search_bbox[1]}")
    print(f"  ‚Ä¢ Biti≈ü Y: {search_bbox[3]}")
    
    for y in range(0, processed_img.shape[0], 10):  # 10 piksel adƒ±mlarla
        row_img = processed_img[y:y+row_height, :symbol_x_end]
        symbol_text = extract_text(row_img)
        cleaned_symbol = re.sub(r'[^A-Z0-9]', '', symbol_text.upper()).rstrip(':.‚Ä¢¬∑*-')
        
        # Her 100 pikselde bir durum raporu
        if y % 100 == 0:
            print(f"  ‚Ä¢ Y: {y:4d} | Metin: '{cleaned_symbol}'")
        
        # Eƒüer ge√ßerli bir sembol bulunduysa
        if len(cleaned_symbol) >= 3:  # En az 3 karakterli semboller
            found_symbols.append((y, cleaned_symbol))
            print(f"\n‚úÖ SEMBOL BULUNDU!")
            print(f"  ‚Ä¢ Y pozisyonu: {y}")
            print(f"  ‚Ä¢ Ger√ßek ekran Y: {search_bbox[1] + y}")  # Ekrandaki ger√ßek Y pozisyonu
            print(f"  ‚Ä¢ Sembol: {cleaned_symbol}")
            print(f"  ‚Ä¢ Ham metin: {symbol_text}")
            print(f"  ‚Ä¢ Satƒ±r y√ºksekliƒüi: {row_height}")
            print(f"  ‚Ä¢ ƒ∞≈ülenen alan: {y} - {y + row_height}")
            print("="*50)
            return search_bbox[1] + y  # Ger√ßek ekran Y pozisyonunu d√∂nd√ºr
    
    if not found_symbols:
        print("\n‚ùå SEMBOL BULUNAMADI!")
        print(f"  ‚Ä¢ Taranan alan: 0-{processed_img.shape[0]} piksel")
        print(f"  ‚Ä¢ Adƒ±m: 10 piksel")
        print(f"  ‚Ä¢ Min. uzunluk: 3 karakter")
        print("="*50)
    
    return 0  # Eƒüer bulunamazsa 0 d√∂nd√ºr

# ==== RUN ====
if __name__ == "__main__":
    process_rows()
